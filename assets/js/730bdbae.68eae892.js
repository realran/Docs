"use strict";(self.webpackChunkrealran=self.webpackChunkrealran||[]).push([[767],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4149:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},l=void 0,c={unversionedId:"Getting Started/Get a Random Number",id:"Getting Started/Get a Random Number",title:"Get a Random Number",description:"One simple example is shown below to demonstrate how to use Remix IDE to deploy the VRFConsumerV2.sol contract on PlatON and get random values.",source:"@site/docs/Getting Started/Get a Random Number.md",sourceDirName:"Getting Started",slug:"/Getting Started/Get a Random Number",permalink:"/Docs/Getting Started/Get a Random Number",editUrl:"https://github.com/realran/Docs/tree/main/docs/Getting Started/Get a Random Number.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/Docs/Getting Started/overview"}},u={},d=[{value:"Preparation",id:"preparation",level:2},{value:"MetaMask Setup",id:"metamask-setup",level:2},{value:"Deploy a VRF consumer contract",id:"deploy-a-vrf-consumer-contract",level:2},{value:"Import VRFContract Repo",id:"import-vrfcontract-repo",level:3},{value:"Compile the <code>VRFConsumerV2.sol</code> contract",id:"compile-the-vrfconsumerv2sol-contract",level:3},{value:"Deploy the <code>VRFConsumerV2.sol</code> contract",id:"deploy-the-vrfconsumerv2sol-contract",level:3},{value:"Load <code>VRCoordinatorV2.sol</code> contract and recharge subscription",id:"load-vrcoordinatorv2sol-contract-and-recharge-subscription",level:3},{value:"Request random values",id:"request-random-values",level:3},{value:"Analyze the <code>VRFConsumerV2</code> contract",id:"analyze-the-vrfconsumerv2-contract",level:2}],p={toc:d};function m(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"One simple example is shown below to demonstrate how to use Remix IDE to deploy the ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFConsumerV2.sol")," contract on PlatON and get random values. "),(0,o.kt)("h2",{id:"preparation"},"Preparation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"MetaMask"),(0,o.kt)("li",{parentName:"ul"},"The Remix IDE"),(0,o.kt)("li",{parentName:"ul"},"PlatON RPC URL:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Mainnet: ",(0,o.kt)("inlineCode",{parentName:"li"},"https://openapi2.platon.network/rpc")),(0,o.kt)("li",{parentName:"ul"},"Devnet: ",(0,o.kt)("inlineCode",{parentName:"li"},"https://devnet2openapi.platon.network/rpc")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"VRFCoordinator")," contract address\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Mainnet: ",(0,o.kt)("inlineCode",{parentName:"li"},"/")),(0,o.kt)("li",{parentName:"ul"},"Devnet2: ",(0,o.kt)("inlineCode",{parentName:"li"},"0x67dc19ca89EA3D322B8C7cC4AD2B3BA7bDF2d089")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Key Hash"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Mainnet: ",(0,o.kt)("inlineCode",{parentName:"li"},"/")),(0,o.kt)("li",{parentName:"ul"},"Devnet: ",(0,o.kt)("inlineCode",{parentName:"li"},"0x818b4b257c281d2e4db77e3bb13733185a31ab805d863047ef7093e2379e87cd")))),(0,o.kt)("li",{parentName:"ul"},"Faucet (optional): ",(0,o.kt)("inlineCode",{parentName:"li"},"https://devnet2faucet.platon.network/faucet"))),(0,o.kt)("h2",{id:"metamask-setup"},"MetaMask Setup"),(0,o.kt)("p",null,"MetaMask is the most widely used browser plug-in wallet and users can easily interact with PlatON Devnet and Mainnet. See the ",(0,o.kt)("a",{parentName:"p",href:"https://devdocs.platon.network/docs/en/MetaMask/"},"MetaMask Configure PlatON Network")," to learn to use it."),(0,o.kt)("h2",{id:"deploy-a-vrf-consumer-contract"},"Deploy a VRF consumer contract"),(0,o.kt)("h3",{id:"import-vrfcontract-repo"},"Import VRFContract Repo"),(0,o.kt)("p",null,"Open the ",(0,o.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/#url=https://github.com/realran/VRFContract/blob/v2.1/sample/VRFConsumerV2.sol"},"VRFConsumerV2.sol")," contract in Remix."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"contracts_structure",src:n(5699).Z,width:"1917",height:"931"})," "),(0,o.kt)("p",null,"For this example, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFConsumerV2.sol")," sample contract in the sample folder. This contract imports the following dependencies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"VRFCoordinatorV2Interface.sol")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"VRFConsumerBaseV2.sol"))),(0,o.kt)("p",null,"The sample contract imports the VRFContract codebase and uses relative paths to import dependencies. However, it is not a must. You could directly import dependencies from ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@realrancrypto/contracts"},"NPM")," without loading the codebase. To do it, just add codes at the beginning of your consumer contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import "@realrancrypto/contracts@2.1.0/src/interfaces/VRFCoordinatorV2Interface.sol";\nimport "@realrancrypto/contracts@2.1.0/src/VRFConsumerBaseV2.sol";\n')),(0,o.kt)("p",null,"The contract also includes pre-configured values for the necessary request parameters such as ",(0,o.kt)("inlineCode",{parentName:"p"},"callbackGasLimit"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"requestConfirmations"),". When you deploy your own contract, you can use the same value as provided in the contract. For the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"keyHash"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"vrfCoordinator"),", You can change its value based on different networks."),(0,o.kt)("h3",{id:"compile-the-vrfconsumerv2sol-contract"},"Compile the ",(0,o.kt)("inlineCode",{parentName:"h3"},"VRFConsumerV2.sol")," contract"),(0,o.kt)("p",null,"Before compiling, please get the ",(0,o.kt)("inlineCode",{parentName:"p"},"keyHash")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFCoordinator")," address based on the network in the ",(0,o.kt)("a",{href:"#Preparation"},"Preparation section"),". In the ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFConsumerV2.sol")," contract, use ",(0,o.kt)("strong",{parentName:"p"},"Devnet's")," ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFCoordinator")," address."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"consumer_compile",src:n(5586).Z,width:"1920",height:"937"})),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open the ",(0,o.kt)("inlineCode",{parentName:"li"},"VRFConsumerV2.sol")," contract in Remix."),(0,o.kt)("li",{parentName:"ol"},"Click the ",(0,o.kt)("strong",{parentName:"li"},"Solidity compiler")," tab on the left sidebar."),(0,o.kt)("li",{parentName:"ol"},"Click the ",(0,o.kt)("strong",{parentName:"li"},"Compile VRFConsumerV2.sol")," button. Ignore the warnings here.")),(0,o.kt)("h3",{id:"deploy-the-vrfconsumerv2sol-contract"},"Deploy the ",(0,o.kt)("inlineCode",{parentName:"h3"},"VRFConsumerV2.sol")," contract"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"consumer_deploy",src:n(5083).Z,width:"1918",height:"930"})),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"On the Remix left sidebar, click the ",(0,o.kt)("strong",{parentName:"p"},"Deploy & run transactions")," tab.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"select the ",(0,o.kt)("strong",{parentName:"p"},"Injected Provider - Metamask")," Environment.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select the ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFConsumerV2")," contract and click the ",(0,o.kt)("strong",{parentName:"p"},"Deploy")," button. MetaMask opens and asks you to confirm the transaction.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A subscription is automatically created when the contract is deployed, and the subscription ID is queried."))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"consumer_subscriptionId",src:n(6148).Z,width:"1919",height:"931"})),(0,o.kt)("h3",{id:"load-vrcoordinatorv2sol-contract-and-recharge-subscription"},"Load ",(0,o.kt)("inlineCode",{parentName:"h3"},"VRCoordinatorV2.sol")," contract and recharge subscription"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open the ",(0,o.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/#url=https://github.com/realran/VRFContract/blob/v2.1/sample/VRFCoordinatorV2.sol"},"VRCoordinatorV2.sol")," contract in Remix and compile it.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Load ",(0,o.kt)("inlineCode",{parentName:"p"},"VRCoordinatorV2.sol")," contract, fill in the ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFCoordinator")," address in the red box 3 and click the At Address button"))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"coordinator_deploy",src:n(3997).Z,width:"1918",height:"936"})," "),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Recharge subscription, in the example, recharge 1 LAT to the subscription with ID 29")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"recharge_subscriptionId",src:n(587).Z,width:"1918",height:"938"})),(0,o.kt)("h3",{id:"request-random-values"},"Request random values"),(0,o.kt)("p",null,"The deployed ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFConsumerV2")," contract requests random values from ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFCoordinator"),", receives those values, and stores them in the ",(0,o.kt)("inlineCode",{parentName:"p"},"s_randomWords")," array. Run the ",(0,o.kt)("inlineCode",{parentName:"p"},"requestRandomWords()")," function to request them."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Request 10 VRF values")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"consumer_request",src:n(3964).Z,width:"1917",height:"935"})),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Get the 10th VRF value at index 9")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"consumer_ret",src:n(6316).Z,width:"1916",height:"933"})),(0,o.kt)("h2",{id:"analyze-the-vrfconsumerv2-contract"},"Analyze the ",(0,o.kt)("inlineCode",{parentName:"h2"},"VRFConsumerV2")," contract"),(0,o.kt)("p",null,"As a consumer of random numbers, the Consumer contract also has subscription management functions, including ",(0,o.kt)("inlineCode",{parentName:"p"},"createSubscription"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"addConsumer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"removeConsumer"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"cancelSubscription"),". Therefore, this contract has the authority to manage subscriptions. You can split Consumer and Subscription Management according to your actual usage scenarios."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@realrancrypto/contracts@2.1.0/src/interfaces/VRFCoordinatorV2Interface.sol";\nimport "@realrancrypto/contracts@2.1.0/src/VRFConsumerBaseV2.sol";\n\ncontract VRFConsumerV2 is VRFConsumerBaseV2 {\n\n VRFCoordinatorV2Interface COORDINATOR;\n\n // The proving key hash key associated with the bls public key\n bytes32 keyHash = 0xefa695190d528bcfb742f4bc74f637209844727c71bcadf1e175aee94ded9d8e;\n\n // Your subscription ID.\n uint64 public s_subscriptionId;\n\n // PlatON Devnet coordinator.\n address vrfCoordinator = 0x3fB03626eDB28320cdD92656f1814b425D69d595;\n\n // A reasonable default is 2000000, but this value could be different\n // on other networks.\n uint32 callbackGasLimit = 2000000;\n\n // The default is 3, but you can set this higher.\n uint16 requestConfirmations = 3;\n\n uint256 public s_requestId;\n address s_owner;\n\n uint256[] public s_randomWords;\n\n constructor() VRFConsumerBaseV2(vrfCoordinator) {\n   COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n   s_owner = msg.sender;\n   createNewSubscription();\n }\n\n // Assumes the subscription is funded sufficiently.\n function requestRandomWords(uint32 numWords) external onlyOwner {\n   // Will revert if subscription is not set and funded.\n   s_requestId = COORDINATOR.requestRandomWords(\n     keyHash,\n     s_subscriptionId,\n     requestConfirmations,\n     callbackGasLimit,\n     numWords\n   );\n }\n\n function fulfillRandomWords(\n   uint256, /* requestId */\n   uint256[] memory randomWords\n ) internal override {\n   s_randomWords = randomWords;\n }\n\n // Create a new subscription when the contract is initially deployed.\n function createNewSubscription() private onlyOwner {\n   // Create a subscription with a new subscription ID.\n   address[] memory consumers = new address[](1);\n   consumers[0] = address(this);\n   s_subscriptionId = COORDINATOR.createSubscription();\n   // Add this contract as a consumer of its own subscription.\n   COORDINATOR.addConsumer(s_subscriptionId, consumers[0]);\n }\n\n function addConsumer(address consumerAddress) external onlyOwner {\n   // Add a consumer contract to the subscription.\n   COORDINATOR.addConsumer(s_subscriptionId, consumerAddress);\n }\n\n function removeConsumer(address consumerAddress) external onlyOwner {\n   // Remove a consumer contract from the subscription.\n   COORDINATOR.removeConsumer(s_subscriptionId, consumerAddress);\n }\n\n function cancelSubscription(address receivingWallet) external onlyOwner {\n   // Cancel the subscription and send the remaining Token to a wallet address.\n   // In this version, receivingWallet is a reserved field that users can fill out as they please.\n   COORDINATOR.cancelSubscription(s_subscriptionId, receivingWallet);\n   s_subscriptionId = 0;\n }\n\n modifier onlyOwner() {\n   require(msg.sender == s_owner);\n   _;\n }\n}\n')),(0,o.kt)("p",null," In this example, The ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFConsumerV2")," contract address is the ",(0,o.kt)("inlineCode",{parentName:"p"},"VRFCoordinator")," subscription owner and uses that subscription. The consumer contract uses static configuration parameters."),(0,o.kt)("p",null," The contract includes the following parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s_subscriptionId"),": the subscription ID."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"keyHash"),": the proving key hash key associated with the bls public key."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"vrfCoordinator"),": the address of the VRFCoordinator contract."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s_randomWords"),": used to store random values.")),(0,o.kt)("p",null," The contract includes the following functions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"createNewSubscription()"),": creates a new subscription and add the consumer itself to the subscription when the contract is initially deployed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"requestRandomWords()"),": requests random values asynchronously."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fulfillRandomWords()"),": receives random values and stores them with the contract."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"addConsumer()"),": add a consumer contract to the subscription."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"removeConsumer()"),": remove a consumer contract from the subscription."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cancelSubscription()"),": cancel the subscription.")))}m.isMDXComponent=!0},5586:function(e,t,n){t.Z=n.p+"assets/images/consumer_compile-a734e0262e0a7bd88f4262f65d63e820.png"},5083:function(e,t,n){t.Z=n.p+"assets/images/consumer_deploy-cfd3ad0d4dae56d013f27f631a0516cd.png"},3964:function(e,t,n){t.Z=n.p+"assets/images/consumer_request-fd0e3546129f56b1c5baa0c9b927b181.png"},6316:function(e,t,n){t.Z=n.p+"assets/images/consumer_ret-4f4032d05d3fced58cbc6be42b14d9e4.png"},6148:function(e,t,n){t.Z=n.p+"assets/images/consumer_subscriptionId-41dc8af80f3967ba8f3499b474af8d94.png"},5699:function(e,t,n){t.Z=n.p+"assets/images/contracts_structure-5bf3198e21b343596e4987b2df8b34d3.png"},3997:function(e,t,n){t.Z=n.p+"assets/images/coordinator_deploy-90d62a2bae23025d891ec45863cc22a4.png"},587:function(e,t,n){t.Z=n.p+"assets/images/recharge_subscriptionId-708dd8a42eb6797e96d2addd870c7691.png"}}]);